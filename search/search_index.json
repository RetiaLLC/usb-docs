{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"USB Nugget","text":""},{"location":"#what-is-the-usb-nugget","title":"What is the USB Nugget?","text":"<p>Meet the USB Nugget - an ESP32S2-powered, cat-shaped USB attack platform!</p> <p></p> <p>The USB Nugget is a cute, powerful HID attack platform that features a screen, buttons, and Wi-Fi support for flexible payload deployment created by Retia LLC, the team behind Null Byte and the Retia show on Hak5.</p> <p>Run and edit payloads over Wi-Fi from mobile and desktop devices, or use the quick-select menu to launch payloads at the press of a button. Watch each command execute in real time on the built-in screen, and get instant feedback on your attack from the built-in LED.</p> <p>The USB Nugget mounts as a USB flash drive when plugged into your computer, making it easy to drag and drop multiple payloads to the onboard storage.</p> <p></p>"},{"location":"fundamentals/circuitpython/","title":"Set up CircuitPython","text":"<p>Use Python on Microcontrollers!</p> <p>While not installed by default, the USB Nugget supports flashing with CircuitPython, a beginner-friendly programming language for microcontrollers based on Python maintained by Adafruit.</p> <p>WARNING!</p> <p>This will erase your current USB Nugget installation, and you'll need to update your USB Nugget again before using it as a USB attack platform</p>"},{"location":"fundamentals/circuitpython/#set-up-the-bootloader-to-enable-usb-support","title":"Set up the bootloader to enable USB support","text":"<p>To set up CircuitPython on the S2 Nugget, navigate here: https://circuitpython.org/board/lolin_s2_mini/</p> <p>Go to the section that says \u201cInstall, Repair, or Update UF2 Bootloader\u201d and click the purple \u201cDownload bootloader ZIP\u201d at the bottom.</p> <p>Plug board into a USB port on your computer using a data/sync cable. Make sure it is the only board plugged in, and that a charge-only cable is not being used.</p> <p>Press and hold down the BOOT or 0 button, press and release the RESET or RST button, and then release the BOOT button.</p> <p>In the Chrome browser, navigate to: https://adafruit.github.io/Adafruit_WebSerial_ESPTool/</p> <p>Select 460800 Baud from the pull-down menu (top-right).</p> <p>Click Connect (top-right).</p> <p>Select the COM or Serial port from the pop-up window.</p> <p>After successful connection, click Erase.</p> <p>After successful erase, click any Choose a file\u2026, then locate and select the combined.bin file unzipped earlier.</p> <p>After successfully choosing combined.bin, click Program.</p> <p>After the TinyUF2 firmware update is complete, press the RESET button on the board. A new drive BOOT should be visible in your file browser.</p>"},{"location":"fundamentals/circuitpython/#install-circuitpython","title":"Install CircuitPython","text":"<p>Go back to https://circuitpython.org/board/lolin_s2_mini/ and download the .UF2 file for the latest stable version of CircuitPython.</p> <p>Once the .UF2 file downloads, drag and drop it into the drive that appears when you plug in your S2 Nugget.</p> <p>This should automatically install CircuitPython on your S2 Nugget!</p>"},{"location":"fundamentals/circuitpython/#programming-in-circuitpython","title":"Programming in CircuitPython","text":"<p>Download and install Mu Editor from here: https://codewith.mu/</p> <p>Open Mu editor and select CircuitPython editing mode.</p> <p>Name your file code.py, this will be automatically run each time the board boots.</p> <p>Save your code to the board, it will automatically re-run your code each time you save changes to it.</p> <p>To add files, drag and drop them from your computer to the board</p>"},{"location":"fundamentals/circuitpython/#using-the-neopixel","title":"Using the NeoPixel","text":"<p>In Mu Editor, create a new file, name it \u201ccode.py\u201d, and save it to your CIRCUITPY drive.</p> <p>Copy or download the following script into your file: https://github.com/RetiaLLC/S2-Nugget/blob/main/NeoPixelTest_CircuitPy_Nugget.py</p> <p>At the bottom of the script (on lines 55-58), uncomment the function you\u2019d like to test.</p> <p>You can choose from:</p> <ol> <li>SetAll(r,g,b) Uncomment this to test setting all neopixels to a single color (set your own values)</li> <li>RandomColor() Uncomment this to test setting all neopixels to random colors</li> <li>VividColor() Uncomment this to test setting all neopixels to vivid random colors using some math</li> <li>RandomChase() Uncomment this to test creating a racing animation for neopixel strips or rings</li> </ol>"},{"location":"fundamentals/circuitpython/#reading-wifi-packets","title":"Reading WiFi Packets","text":"<p>To try out Wi-Fi packet parsing, download the Wifi_Deauth_Detector_Example.zip file here: https://github.com/RetiaLLC/S2-Nugget/blob/main/Wifi_Deauth_Detector_Example.zip</p> <p>Unzip the .ZIP file, and drag and drop the contents into your CircuitPy board, overwriting the existing /lib folder and code.py</p> <p>Open Code.py to see the code under the hood, otherwise the code should run and detect deauth packets with a shocked anime face.</p>"},{"location":"fundamentals/circuitpython/#controlling-the-screen","title":"Controlling the screen","text":"<p>To try loading a bitmap on the screen, download the OLED Bitmap example here: https://github.com/RetiaLLC/S2-Nugget/blob/main/OLED_Bitmap_Example.zip</p> <p>Unzip the .ZIP file, and drag and drop the contents into your CircuitPy board, overwriting the existing /lib folder and code.py</p> <p>You can drag and drop black and white .BMP images that are 128X64 onto your board and display them by changing the file path in code.py</p>"},{"location":"fundamentals/circuitpython/#hid-attack-examples","title":"HID Attack Examples","text":"<p>The S2 Nugget supports HID attacks! You can pretend to be a keyboard or mouse to send keystrokes or control mouse movements.</p> <p>To try out the HID attack examples, download the ZIP file here: https://github.com/RetiaLLC/S2-Nugget/blob/main/HID_Attack_CircuitPython_Examples.zip</p> <p>Unzip the .ZIP file, and drag and drop the contents into your CircuitPy board, overwriting the existing /lib folder and code.py</p> <p>You\u2019ll find 3 examples, which include:</p> <ul> <li>MacOS_HID_Payload - Pretends to be a keyboard, when inserted into MacOS computer, opens a terminal window and injects a payload. Currently set to \u201ccurl parrot.live\u201d which makes a dancing parrot appear. Uses the screen on the S2 Nugget to show the status of the payload.</li> <li>Simple_HID_Payload - Bare-bones HID payload to inject keystrokes, currently set for MacOS to \u201ccurl parrot.live\u201d which makes a dancing parrot appear.</li> <li>Screen_Mouse_Jiggler - Turns the S2 Nugget into a mouse jiggler. When the right button is pressed, the mouse is moved randomly. On screen instructions.</li> <li>Simple_Mouse_Jiggler - Bare-bones mouse jiggler with no screen or neopixel indicator</li> </ul> <p>You can easily add payloads for your own operating system! For more CircuiptPython HID documentation, see here: https://circuitpython.readthedocs.io/projects/hid/en/latest/</p> <p>To run an example, make a copy of the script and rename it \u201ccode.py\u201d, overwriting the old \u201ccode.py\u201d file.</p> <p>Your S2 Nugget will automatically reload and run the current code.py script.</p> <p>You can find a full written guide to flashing here: https://circuitpython.org/board/lolin_s2_mini/</p> <p>Once you have CircuitPython installed, check out our supported project on our CircuitPython GitHub repository.</p>"},{"location":"fundamentals/live-control/","title":"Live Control","text":"<p>Run Commands live</p> <p>The USB Nugget supports live command both through a web interface and via a web API.</p>"},{"location":"fundamentals/live-control/#web-interface","title":"Web Interface","text":"<p>To access the web interface and run payloads live, connect to the USB Nugget\u2019s Wi-Fi access point and visit the creation page.</p> <p></p> <p>From this page, you can create, run, and save payloads to your USB Nugget.</p>"},{"location":"fundamentals/live-control/#python-script","title":"Python Script","text":"<p>If you want to use a script to send CatScratch commands or files to your USB Nugget, the following scripts will help you get started.</p> <p>The following simple Python script can be used to send individual CatScratch commands from your computer while connected to the RubberNugget\u2019s Wi-Fi network.</p> <pre><code>import requests, base64\nurl = 'http://192.168.4.1/runlive.php'\nwhile True:\n    pew = input(\"Enter command:\\n\")\n    try: requests.post(url, base64.b64encode(pew.encode()))\n    except: print(\"Sent\")\n</code></pre> <p>If you want to sent entire CatScratch payloads, you can use the following short script to send .TXT files.</p> <pre><code>import requests, base64\nurl = 'http://192.168.4.1/runlive.php'\n\nwhile True:\n    pew = input(\"Enter path to CatScratch File:\\n\")\n    file = open(pew, \"r\")\n    payload = file.read()\n    try: requests.post(url, base64.b64encode(payload.encode()))\n    except: pew = input(\"Sent, press enter to send another:\\n\")\n</code></pre>"},{"location":"fundamentals/wifi/","title":"Wi-Fi Interface","text":"<p>Connect to your Nugget from any browser</p> <p>The USB Nugget creates a Wi-Fi interface that enables remote access. Accessing it is easy!</p> <p></p> <ol> <li>Locate the <code>RubberNugget</code> Wi-Fi Network</li> <li>Connect with the password <code>nugget123</code></li> <li>Once connected, navigate to <code>192.168.4.1</code> in a browser</li> <li>You\u2019re connected! You can edit, run, and delete payloads from your browser.</li> </ol>"},{"location":"guides/loading-payloads/","title":"Loading Payloads on the Nugget","text":"<p>Adding payloads via the USB and web interface</p> <p>The USB Nugget supports adding payloads both through the web interface and directly over USB.</p> <p>To start, let\u2019s write a simple CatScratch payload and save it over USB.</p>"},{"location":"guides/loading-payloads/#write-save-a-simple-script","title":"Write &amp; Save a Simple Script","text":"<p>In your word processor of choice, write out a simple script and save it a plain .TXT file</p> <pre><code>GUI SPACE\nWAIT 100\nTYPE Terminal\nENTER\nWAIT 1000\nTYPE curl parrot.live\nENTER\n</code></pre>"},{"location":"guides/loading-payloads/#plug-in-usb-nugget","title":"Plug in USB Nugget","text":"<p>Once you\u2019ve plugged in your USB Nugget with a USB type C cable that supports data transfer, it should appear on your computer as a flash drive.</p> <p>The Nugget comes preloaded with 4 different folders to cover 3 operating systems and frequently used payloads: - Linux - Mac - Windows - Starred Payloads</p> <p>You can re-name these folders if you wish.</p>"},{"location":"guides/loading-payloads/#drag-drop-payload-to-the-nugget","title":"Drag &amp; Drop Payload to the Nugget","text":"<p>We\u2019ll drop our payload in a \u201cTest\u201d folder under the \u201cMac\u201d operating system folder. The file structure will look like this:</p> <p>USB Nugget Drive \u2192 Mac Folder \u2192 Test Folder \u2192 Payload.TXT</p> <p>Once we drop our file onto the Nugget, we can see it by pressing the left button for the Mac folder, then selecting the \u201cTest\u201d folder.</p> <p></p>"},{"location":"guides/loading-payloads/#select-run-payload","title":"Select &amp; Run Payload","text":"<p>Next, we select the \u201cTest\u201d folder we just made by pressing the left button. </p> <p>Inside the \"Test\" folder, we should see our payload.TXT!</p> <p>We can run our payload by pressing the up button.</p> <p></p> <p>When the payload starts executing, the LED will turn red.</p> <p>You can watch each command execute on the built-in screen while the payload runs.</p> <p></p> <p>That\u2019s it! We\u2019ve created a test payload and run it on the USB Nugget using the USB interface.</p>"},{"location":"guides/update-on-chrome/","title":"Update Your USB Nugget with Chrome Browser","text":"<p>Flash your RubberNugget with the latest firmware</p> <p>Update First</p> <p>The USB Nugget is updated frequently. Get the latest version to ensure you have access to new features &amp; bug fixes!</p> <p>Before you start hacking with your USB Nugget, make sure to update it to the latest firmware.</p> <p>To update your USB Nugget, you will need:</p> <ul> <li>A USB type C cable that supports data </li> <li>The Google Chrome web browser </li> <li>The latest USB Nugget firmware .BIN file</li> </ul>"},{"location":"guides/update-on-chrome/#flashing-via-chrome-browser","title":"Flashing Via Chrome Browser","text":"<p>The easiest way to flash your USB Nugget is via the Chrome web browser. First, remove any case and unplug your Nugget.</p> <p>Step 1: Visit the release page &amp; download the most recent .BIN file.</p> <p>Step 2: On the back of your Nugget, locate the \u201c0\u201d button &amp; hold it down. </p> <p>Step 3: Plug the Nugget into your computer with a USB cable &amp; then release the \u201c0\u201d button.\\</p> <p>This puts the nugget into flashing mode.</p> <p>If you have issues with step 5, try holding down the \u201c0\u201d button, tapping the \u201cRST\u201d button, and then releasing the \u201c0\u201d button to enter flashing mode instead.</p> <p>Step 4: In a Chrome browser window, navigate to https://nabucasa.github.io/esp-web-flasher/</p> <p>WebSerial Support</p> <p>Currently, Firefox and other browsers do not support WebSerial.</p> <p></p> <p>Step 5: Click the \u201cConnect\u201d button &amp; select the \u201cESP32-S2\u201d/\"ESP32-S3\" board. </p> <p>Step 6: Once connected, click \"Erase\" &amp; confirm. </p> <p>Step 7: After erasing the nugget has finished, click \u201cChoose a file\u201d &amp; select the .BIN file from step 1. </p>"},{"location":"guides/update-on-chrome/#your-nugget-is-ready-to-hack","title":"Your Nugget is ready to hack!","text":"<p>Plug in your USB Nugget and watch it mount as a flash drive. You can open the drive to explore preinstalled payloads and begin to add your own.</p> <p>You can also connect via the web interface and run payloads from any device! The network name is <code>RubberNugget</code> and the password is <code>nugget123</code> to connect. Once connected, navigate to <code>192.168.4.1</code> in a browser.</p>"},{"location":"guides/update-with-esptool/","title":"Update Your USB Nugget with ESPtool","text":"<p>Flash your RubberNugget via the command line</p> <p>Update First</p> <p>The USB Nugget is updated frequently. Get the latest version to ensure you have access to new features &amp; bug fixes!</p> <p>If you\u2019re more comfortable in the command line (or just hate using Chrome), you can also update your nugget using ESPtool.</p>"},{"location":"guides/update-with-esptool/#flashing-via-esptool","title":"Flashing via ESPTool","text":"<p>Step 1: Visit the flashing site &amp; download the most recent .BIN file.</p> <p>Step 2: On the back of your Nugget, locate the \u201c0\u201d button &amp; hold it down. </p> <p>Step 3: Plug the Nugget into your computer with a USB cable &amp; then release the \u201c0\u201d button.</p> <p>This puts the nugget into flashing mode. If you have issues with step 5, try holding down the \u201c0\u201d button, tapping the \u201cRST\u201d button, and then releasing the \u201c0\u201d button to enter flashing mode instead.</p> <p>Step 4: Finding the Serial Port that your USB Nugget is connected to.</p>"},{"location":"guides/update-with-esptool/#finding-the-serial-port","title":"Finding the Serial Port","text":"<p>Run the command below to erase the flash of your Nugget</p> WindowsmacOSLinux <p>Found via the Device Manager</p> <pre><code>ls /dev/cu.*\n</code></pre> <pre><code>ls /dev/tty*\n</code></pre> <p>Step 5: Erase the flash memory of your Nugget.</p>"},{"location":"guides/update-with-esptool/#erase-the-flash-memory","title":"Erase the Flash Memory","text":"<p>Note</p> <p>Make sure to replace <code>SERIAL_PORT</code> with the serial port of your Nugget.</p> WindowsmacOS &amp; Linux <pre><code>esptool --chip esp32s2 -p SERIAL_PORT erase_flash\n</code></pre> <pre><code>esptool.py --chip esp32s2 -p SERIAL_PORT erase_flash\n</code></pre>"},{"location":"guides/update-with-esptool/#flashing-the-new-bin-file","title":"Flashing the new .BIN file","text":"<p>After erasing is complete, run the following command, making sure to replace <code>SERIAL_PORT</code> with the port your Nugget is on, and UPDATE.BIN with the update file.</p> WindowsmacOS &amp; Linux <pre><code>esptool --chip esp32s2 -p SERIAL_PORT write_flash -z 0x1000 UPDATE.BIN\n</code></pre> <pre><code>esptool.py --chip esp32s2 -p SERIAL_PORT write_flash -z 0x1000 UPDATE.BIN\n</code></pre> <p>Once flashing is finished, unplug your Nugget to complete the update.</p>"},{"location":"guides/update-with-esptool/#your-nugget-is-ready-to-hack","title":"Your Nugget is ready to hack!","text":"<p>Plug in your USB Nugget and watch it mount as a flash drive. You can open the drive to explore preinstalled payloads and begin to add your own.</p> <p>You can also connect via the web interface and run payloads from any device! The network name is <code>RubberNugget</code> and the password is <code>nugget123</code> to connect. Once connected, navigate to <code>192.168.4.1</code> in a browser.</p>"},{"location":"guides/writing-first-payload/","title":"Writing Your First Payload","text":"<p>Making CatScratch payloads on the USB Nugget</p> <p></p> <p>The USB Nugget supports CatScratch, making it easy to create your first payload!</p> <p>If you need inspiration, you can find a list of payloads on the Hak5 GitHub repository, which can be converted to CatScratch with our converter tool.</p> <p>To get started, let\u2019s review the full list of CatScratch commands the USB Nugget supports.</p>"},{"location":"guides/writing-first-payload/#catscratch-payload-structure","title":"CatScratch Payload Structure","text":"<p>When writing a CatScratch payload, commands are executed line by line. It\u2019s also possible to press multiple keys at the same time by putting commands on the same line!</p> <p>To write out a piece of text, type <code>TYPE</code> in all caps. See the example below for how this works:</p> Command Result SHIFT C Press the Shift key and the c key TYPE Hello Type out the word \u201cHello\u201d ALT F4 Press the Alt key and the F4 key"},{"location":"guides/writing-first-payload/#built-in-commands","title":"Built-in Commands","text":"<p>Now that we have the basics down, let\u2019s take a look at supported commands:</p> Command Usage Description <code>//</code> <code>// [ANY]</code> Comments are ignored by the interpreter <code>DEFAULTWAIT</code> <code>DEFAULTWAIT [INT]</code> Sets the default time in ms between each command <code>WAIT</code> <code>WAIT [INT]</code> Sets a one-time delay in ms <code>TYPE</code> <code>TYPE [STR]</code> Types whatever string follows the command <code>LED</code> <code>LED [CHAR]</code> Changes the color of the built-in Neopixel <code>SCREEN</code> <code>SCREEN [STR]</code> Displays the string after the command on the Nugget\u2019s screen"},{"location":"guides/writing-first-payload/#supported-led-colors","title":"Supported LED Colors","text":"<p>The USB Nugget supports the following LED colors:</p> Code Color <code>R</code> Red <code>G</code> Green <code>B</code> Blue <code>Y</code> Yellow <code>M</code> Magenta <code>C</code> Cyan <code>W</code> White"},{"location":"guides/writing-first-payload/#supported-keys","title":"Supported Keys","text":"<p>Most standard keys are supported by the USB Nugget.</p> Key <code>a-z</code> <code>A-Z</code> <code>0-9</code> <code>F1-F12</code> <code>!@#$%^&amp;*()_-=+</code>, etc"},{"location":"guides/writing-first-payload/#modifier-keys","title":"Modifier Keys","text":"<p>Keys like <code>SHIFT</code>, <code>ALT</code>, and the <code>WINDOWS</code>/<code>GUI</code> key can be useful for accessing hotkey combinations, and are frequently used in combination key presses.</p> Key <code>CTRL</code>/<code>CONTROL</code> <code>SHIFT</code> <code>ALT</code> <code>WINDOWS</code>/<code>CMD</code>/<code>GUI</code>"},{"location":"guides/writing-first-payload/#other-useful-keys","title":"Other Useful Keys","text":"<p>Virtually anything you can do behind a keyboard can be recreated with the right keypresses. The following keys are essential to trigger keyboard shortcuts and navigate without a mouse.</p> Key <code>ENTER</code> <code>MENU</code>/<code>APP</code> <code>DELETE</code> <code>HOME</code> <code>INSERT</code> <code>PAGEUP</code> <code>PAGEDOWN</code> <code>UP</code> <code>DOWN</code> <code>LEFT</code> <code>RIGHT</code> <code>TAB</code> <code>ESC</code> <code>SPACE</code> <code>BACKSPACE</code> <code>END</code> <code>CAPSLOCK</code> <code>SCROLLLOCK</code> <code>NUMLOCK</code> <code>PRINTSCREEN</code> <code>PAUSE</code>/<code>BREAK</code> <p>Now that we\u2019ve gone over the supported CatScratch commands, let\u2019s load and deploy a payload to the USB Nugget.</p>"},{"location":"help/faq/","title":"Frequently Asked Questions","text":""},{"location":"help/faq/#wheres-other-documentation","title":"Wheres other documentation?","text":"<ul> <li>Hak5 Payload Repository</li> <li>Official CatScratch Payloads</li> </ul>"},{"location":"help/faq/#where-can-i-get-support","title":"Where can I get support?","text":"<ul> <li>GitHub</li> <li>Discord Server</li> </ul>"},{"location":"help/faq/#where-can-i-buy-a-usb-nugget","title":"Where can I buy a USB Nugget?","text":"<ul> <li>Retia Store</li> </ul>"},{"location":"help/update/","title":"How to Update","text":"<p>Keep your USB Nugget up to date with the latest firmware!</p> <p>Use our online web flasher in Chrome to flash the latest firmware to your USB Nugget!</p> <p>Update with ESPTool</p> <p>Update on Chrome</p>"},{"location":"use-cases/designers/","title":"For Designers","text":"<p>Print a case, or design a new one.</p> <p>To increase the durability of the USB Nugget, we continue to develop a series of 3D printed cases to protect Nuggets from accidental damage.</p> <p>You can find the files to print, modify, or remix our case designs in the case section of our GitHub repository.</p> <p></p>"},{"location":"use-cases/support/","title":"For Support","text":"<p>Need help? We're here!</p> <p> If you\u2019re having software or hardware problems with the USB Nugget, please come talk to us on our Discord Server. Make sure to include the following information:</p> <ul> <li>Is this a bug, feature request, or feedback?</li> <li>What steps are needed to reproduce the issue?</li> <li>What is the expected result? What is supposed to happen?</li> <li>What is the actual result? What does the bug look like?</li> </ul>"}]}